{
  "version": 3,
  "sources": ["../../../../../../node_modules/wcs-core/dist/esm/wcs-checkbox.entry.js"],
  "sourcesContent": ["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-d9de61ce.js';\nimport { i as inheritAriaAttributes, a as inheritAttributes, s as setOrRemoveAttribute } from './helpers-ece6a2d3.js';\nimport { g as getSlottedContentText } from './control-component-interface-9f09e520.js';\nconst checkboxCss = \":host{--wcs-checkbox-border-color:var(--wcs-checkbox-border-color-default);--wcs-checkbox-border-color-default:var(--wcs-semantic-color-border-control-indicator-default);--wcs-checkbox-border-color-hover:var(--wcs-semantic-color-border-control-indicator-hover);--wcs-checkbox-border-color-disabled:var(--wcs-semantic-color-background-control-indicator-disabled);--wcs-checkbox-border-color-selected:var(--wcs-semantic-color-border-control-indicator-selected);--wcs-checkbox-border-color-indeterminate:var(--wcs-semantic-color-border-control-indicator-selected);--wcs-checkbox-border-radius:calc(0.5 * var(--wcs-semantic-size-base));--wcs-checkbox-border-width:var(--wcs-semantic-border-width-large);--wcs-checkbox-size:calc(2 * var(--wcs-semantic-size-base));--wcs-checkbox-text-color-default:var(--wcs-semantic-color-text-secondary);--wcs-checkbox-text-color-disabled:var(--wcs-semantic-color-text-tertiary);--wcs-checkbox-text-color-hover:var(--wcs-semantic-color-text-secondary);--wcs-checkbox-text-color-selected:var(--wcs-semantic-color-text-primary);--wcs-checkbox-text-font-size:var(--wcs-semantic-font-size-label-1);--wcs-checkbox-text-font-weight:var(--wcs-semantic-font-weight-medium);--wcs-checkbox-background-color-default:transparent;--wcs-checkbox-background-color-hover:var(--wcs-semantic-color-background-control-indicator-hover);--wcs-checkbox-background-color-disabled:var(--wcs-semantic-color-background-control-indicator-disabled);--wcs-checkbox-background-color-selected:var(--wcs-semantic-color-background-control-indicator-selected);--wcs-checkbox-background-color-indeterminate:var(--wcs-semantic-color-background-control-indicator-selected);--wcs-checkbox-outline-radius-focus:var(--wcs-semantic-border-radius-base);--wcs-checkbox-outline-color-focus:var(--wcs-semantic-color-border-focus-base);--wcs-checkbox-gap:var(--wcs-semantic-spacing-base);--wcs-checkmark-color:var(--wcs-semantic-color-foreground-control-indicator-selected);--wcs-checkmark-height:0.5rem;--wcs-checkmark-width:0.1875rem;--wcs-checkmark-border-width:0.125rem;--wcs-indeterminate-bar-width:0.625rem;--wcs-indeterminate-bar-height:0.125rem;--wcs-indeterminate-bar-border-radius:0.0625rem;--wcs-indeterminate-bar-background-color:var(--wcs-semantic-color-foreground-control-indicator-selected);--wcs-checkbox-transition-duration:var(--wcs-semantic-motion-duration-feedback-base);display:inline-flex}:host([disabled]) .text{color:var(--wcs-checkbox-text-color-disabled)}:host([disabled]) .wcs-checkmark{border-color:var(--wcs-checkbox-border-color-disabled)}:host([disabled]) .wcs-container{cursor:not-allowed}:host([checked]:not([indeterminate][disabled])){--wcs-checkbox-border-color:var(--wcs-checkbox-border-color-selected)}.wcs-checkmark{transition-property:border-color, background-color, color;transition:var(--wcs-checkbox-transition-duration) ease-in-out}.wcs-container{position:relative;font-size:var(--wcs-checkbox-text-font-size);font-weight:var(--wcs-checkbox-text-font-weight);user-select:none;display:flex;gap:var(--wcs-checkbox-gap)}.wcs-container:not([aria-disabled]){cursor:pointer}:host([label-alignment=top]) .wcs-container{align-items:start}:host([label-alignment=center]) .wcs-container{align-items:center}:host([label-alignment=bottom]) .wcs-container{align-items:flex-end}.wcs-container input{position:absolute;opacity:0;height:1px;width:1px;overflow:hidden;clip-path:inset(50%);white-space:nowrap}.wcs-container:hover:not([aria-disabled]) .text,input:focus .text{color:var(--wcs-checkbox-text-color-hover)}.wcs-container:hover:not([aria-disabled]) .wcs-checkmark,input:focus .wcs-checkmark{border-color:var(--wcs-checkbox-border-color-hover)}.wcs-container:has(input:focus-visible){outline:var(--wcs-semantic-border-width-large) dashed var(--wcs-checkbox-outline-color-focus);outline-offset:var(--wcs-semantic-spacing-small);border-radius:var(--wcs-checkbox-outline-radius-focus)}@supports not selector(.wcs-container:has(input:focus-visible)){.wcs-container:focus-within{outline:var(--wcs-semantic-border-width-large) dashed var(--wcs-checkbox-outline-color-focus);outline-offset:var(--wcs-semantic-spacing-small);border-radius:var(--wcs-checkbox-outline-radius-focus)}}.wcs-checkmark{flex:0 0 var(--wcs-checkbox-size);width:var(--wcs-checkbox-size);height:var(--wcs-checkbox-size);background-color:var(--wcs-checkbox-background-color-default);border:var(--wcs-checkbox-border-width) solid var(--wcs-checkbox-border-color);border-radius:var(--wcs-checkbox-border-radius);box-sizing:border-box}:host([indeterminate]) .wcs-checkmark{border-color:var(--wcs-checkbox-border-color-indeterminate);background:var(--wcs-checkbox-background-color-indeterminate)}:host([indeterminate][disabled]) .wcs-checkmark{border-color:var(--wcs-checkbox-border-color-disabled);background:var(--wcs-checkbox-background-color-disabled)}.wcs-container:not([aria-disabled]) input:checked~.wcs-checkmark{background-color:var(--wcs-checkbox-background-color-selected)}.wcs-container[aria-disabled] input:checked~.wcs-checkmark{background-color:var(--wcs-checkbox-background-color-disabled)}.wcs-checkmark:after{content:\\\"\\\";position:absolute;display:none}.wcs-checkmark{position:relative}:host([checked]),:host([indeterminate]){}:host([checked]) .wcs-container input~.wcs-checkmark:after,:host([indeterminate]) .wcs-container input~.wcs-checkmark:after{display:flex}:host([checked]) .wcs-container:not([aria-disabled]):hover .wcs-checkmark,:host([indeterminate]) .wcs-container:not([aria-disabled]):hover .wcs-checkmark{background-color:var(--wcs-checkbox-background-color-hover)}:host(:not([indeterminate])){}:host(:not([indeterminate])) .wcs-container .wcs-checkmark:after{left:0.25rem;width:var(--wcs-checkmark-width);height:var(--wcs-checkmark-height);border:solid var(--wcs-checkmark-color, white);border-width:0 var(--wcs-checkmark-border-width) var(--wcs-checkmark-border-width) 0;-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg)}:host([indeterminate]) .wcs-container .wcs-checkmark:after{position:absolute;background-color:var(--wcs-indeterminate-bar-background-color);left:calc(50% - var(--wcs-indeterminate-bar-width) / 2);top:calc(50% - var(--wcs-indeterminate-bar-height) / 2);width:var(--wcs-indeterminate-bar-width);height:var(--wcs-indeterminate-bar-height);border-radius:var(--wcs-indeterminate-bar-border-radius)}.wcs-container:not([aria-disabled]) input:not(:checked)~.text{color:var(--wcs-checkbox-text-color-default);font-weight:var(--wcs-checkbox-text-font-weight)}.wcs-container:not([aria-disabled]) input:checked~.text{color:var(--wcs-checkbox-text-color-selected);font-weight:var(--wcs-checkbox-text-font-weight)}.hidden{display:none}\";\nconst WcsCheckboxStyle0 = checkboxCss;\nconst CHECKBOX_INHERITED_ATTRS = ['tabindex', 'title'];\nconst Checkbox = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.wcsChange = createEvent(this, \"wcsChange\", 7);\n    this.wcsFocus = createEvent(this, \"wcsFocus\", 7);\n    this.wcsBlur = createEvent(this, \"wcsBlur\", 7);\n    this.inheritedAttributes = {};\n    this.checkboxId = `wcs-checkbox-${checkboxIds++}`;\n    this.name = this.checkboxId;\n    this.indeterminate = false;\n    this.checked = false;\n    this.labelAlignment = 'center';\n    this.disabled = false;\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, CHECKBOX_INHERITED_ATTRS));\n  }\n  componentDidLoad() {\n    this.onSlotChange();\n  }\n  async setAriaAttribute(attr, value) {\n    setOrRemoveAttribute(this.nativeInput, attr, value);\n  }\n  async getLabel() {\n    return getSlottedContentText(this.el);\n  }\n  handleChange(e) {\n    e.stopImmediatePropagation();\n    e.preventDefault();\n    this.toggleCheckboxState();\n  }\n  async handleHostClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.toggleCheckboxState();\n  }\n  handleInputClick(ev) {\n    // If the click event is coming from the mouse we ignore it.\n    // We only want to handle the keyboard interactions as it is the only purpose of this native input\n    if (ev.detail) {\n      ev.stopImmediatePropagation();\n      ev.preventDefault();\n    }\n  }\n  toggleCheckboxState() {\n    if (this.disabled) return;\n    this.indeterminate = false;\n    this.checked = !this.checked;\n    this.wcsChange.emit({\n      checked: this.checked\n    });\n  }\n  handleFocus(event) {\n    this.wcsFocus.emit(event);\n  }\n  handleBlur(event) {\n    this.wcsBlur.emit(event);\n  }\n  onSlotChange() {\n    const slot = this.el.shadowRoot.querySelector('slot');\n    if (slot) {\n      // TODO: remove when pseudo-class that indicate a slot has content is supported in all major browsers \n      //  (https://github.com/w3c/csswg-drafts/issues/6867)\n      // https://developer.mozilla.org/en-US/docs/Web/CSS/:empty\n      const assignedNodes = slot.assignedNodes();\n      if (assignedNodes.length > 0) {\n        this.el.shadowRoot.querySelector('.text').classList.remove('hidden');\n      } else {\n        this.el.shadowRoot.querySelector('.text').classList.add('hidden');\n      }\n    }\n  }\n  render() {\n    return h(Host, {\n      key: 'a20390ff38ab6bf7ec5a0868d396857edd93daa1'\n    }, h(\"label\", {\n      key: 'ab9d5f22c1f48f84dbd75ad4d4699f403cbfb059',\n      htmlFor: this.name,\n      class: \"wcs-container\",\n      \"aria-disabled\": this.disabled\n    }, h(\"input\", Object.assign({\n      key: '05afab86b77b327fe9e4f3c9e1e44d67d3c7678d',\n      onBlur: this.handleBlur.bind(this),\n      onChange: this.handleChange.bind(this),\n      onFocus: this.handleFocus.bind(this),\n      onClick: this.handleInputClick.bind(this),\n      checked: this.checked,\n      class: \"wcs-checkbox\",\n      type: \"checkbox\",\n      ref: el => this.nativeInput = el,\n      name: this.name,\n      disabled: this.disabled,\n      id: this.name\n    }, this.inheritedAttributes)), h(\"span\", {\n      key: 'f864ab3331ce992ea6b769b06cb29485485300e8',\n      class: \"wcs-checkmark\"\n    }), h(\"span\", {\n      key: '5709887a3b90454c7a2f711f553f3d95a6f98326',\n      class: \"text\"\n    }, h(\"slot\", {\n      key: 'ed2dc70d43b7915962c531e901a7abb84b1d34b6',\n      onSlotchange: _ => this.onSlotChange()\n    }))));\n  }\n  static get delegatesFocus() {\n    return true;\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nlet checkboxIds = 0;\nCheckbox.style = WcsCheckboxStyle0;\nexport { Checkbox as wcs_checkbox };\n\n"],
  "mappings": "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",
  "names": []
}
