{
  "version": 3,
  "sources": ["../../../../../../node_modules/wcs-core/dist/esm/wcs-switch.entry.js"],
  "sourcesContent": ["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-d9de61ce.js';\nimport { i as inheritAriaAttributes, a as inheritAttributes, s as setOrRemoveAttribute } from './helpers-ece6a2d3.js';\nimport { g as getSlottedContentText } from './control-component-interface-9f09e520.js';\nconst switchCss = \":host{--wcs-switch-background-color-initial:var(--wcs-semantic-color-background-control-indicator-default);--wcs-switch-background-color-final:var(--wcs-semantic-color-background-control-indicator-selected);--wcs-switch-background-color-disabled:var(--wcs-semantic-color-background-control-indicator-disabled);--wcs-switch-background-color-disabled-selected:var(--wcs-semantic-color-background-control-indicator-disabled);--wcs-switch-background-color-hover-selected:var(--wcs-semantic-color-background-control-indicator-hover);--wcs-switch-padding-horizontal:var(--wcs-semantic-spacing-small);--wcs-switch-padding-vertical:calc((var(--wcs-switch-height) - var(--wcs-switch-dot-size)) / 2);--wcs-switch-dot-color-default:var(--wcs-semantic-color-foreground-brand);--wcs-switch-dot-color-selected:var(--wcs-semantic-color-foreground-control-indicator-selected);--wcs-switch-dot-color-disabled:var(--wcs-semantic-color-foreground-control-indicator-disabled);--wcs-switch-text-color-default:var(--wcs-semantic-color-text-secondary);--wcs-switch-text-color-selected:var(--wcs-semantic-color-text-primary);--wcs-switch-text-color-disabled:var(--wcs-semantic-color-text-disabled);--wcs-switch-text-font-weight-default:var(--wcs-semantic-font-weight-medium);--wcs-switch-text-font-weight-selected:var(--wcs-semantic-font-weight-medium);--wcs-switch-outline-color-focus:var(--wcs-semantic-color-border-focus-base);--wcs-switch-dot-translate-x:calc(var(--wcs-switch-width) - var(--wcs-switch-dot-size) - (2 * var(--wcs-switch-padding-horizontal)));--wcs-switch-transition-duration:var(--wcs-semantic-motion-duration-feedback-base);--wcs-switch-dot-size:0.875rem;--wcs-switch-height:var(--wcs-semantic-size-xs);--wcs-switch-width:var(--wcs-semantic-size-l);--wcs-switch-border-radius:var(--wcs-semantic-border-radius-full);--wcs-switch-gap:var(--wcs-semantic-spacing-base);display:inline-flex}:host([disabled]) .text{color:var(--wcs-switch-text-color-disabled)}:host([disabled]) .wcs-container{cursor:not-allowed}.wcs-container{position:relative;display:flex;user-select:none;margin-bottom:0;gap:var(--wcs-switch-gap)}.wcs-container:has(input:focus-visible){outline:var(--wcs-semantic-border-width-large) dashed var(--wcs-switch-outline-color-focus);outline-offset:var(--wcs-semantic-spacing-small);border-radius:var(--wcs-switch-border-radius)}@supports not selector(.wcs-container:has(input:focus-visible)){.wcs-container:focus-within{outline:var(--wcs-semantic-border-width-large) dashed var(--wcs-switch-outline-color-focus);outline-offset:var(--wcs-semantic-spacing-small);border-radius:var(--wcs-switch-border-radius)}}:host([label-alignment=top]) .wcs-container{align-items:start}:host([label-alignment=center]) .wcs-container{align-items:center}:host([label-alignment=bottom]) .wcs-container{align-items:flex-end}.wcs-container input{position:absolute;opacity:0;height:0;width:0}.text{color:var(--wcs-switch-text-color-default);font-weight:var(--wcs-switch-text-font-weight-default);line-height:1.375}.wcs-container:not([aria-disabled]) input:checked~.text{font-weight:var(--wcs-switch-text-font-weight-selected);color:var(--wcs-switch-text-color-selected)}.wcs-checkmark::before{position:absolute;transition:all var(--wcs-switch-transition-duration) ease-out}.wcs-checkmark::before{bottom:var(--wcs-switch-padding-vertical);left:var(--wcs-switch-padding-horizontal);width:var(--wcs-switch-dot-size);height:var(--wcs-switch-dot-size);content:\\\"\\\";border-radius:50%;background-color:var(--wcs-switch-dot-color-default)}:host([disabled]:not([checked])) .wcs-checkmark::before{background-color:var(--wcs-switch-dot-color-disabled)}:host([disabled]:not([checked])) .wcs-checkmark{background-color:var(--wcs-switch-background-color-disabled)}:host([disabled][checked]) .wcs-checkmark{background-color:var(--wcs-switch-background-color-disabled-selected)}:host([disabled]) .text{color:var(--wcs-switch-text-color-disabled)}.wcs-checkmark{top:0;right:0;bottom:0;left:0;width:var(--wcs-switch-width);height:var(--wcs-switch-height);border-radius:var(--wcs-switch-border-radius);background-color:var(--wcs-switch-background-color-initial);min-width:3rem;position:relative}.wcs-container:not([aria-disabled]){cursor:pointer}input:not([disabled]):checked+.wcs-checkmark::before,.wcs-container:focus input:not([disabled])+.wcs-checkmark::before{background-color:var(--wcs-switch-dot-color-selected)}input:checked+.wcs-checkmark::before{transform:translateX(var(--wcs-switch-dot-translate-x))}input:not([disabled]):checked+.wcs-checkmark{background-color:var(--wcs-switch-background-color-final)}.wcs-container:hover input:not([disabled]):checked+.wcs-checkmark{background-color:var(--wcs-switch-background-color-hover-selected)}\";\nconst WcsSwitchStyle0 = switchCss;\nconst SWITCH_INHERITED_ATTRS = ['tabindex'];\nconst Switch = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.wcsChange = createEvent(this, \"wcsChange\", 7);\n    this.wcsFocus = createEvent(this, \"wcsFocus\", 7);\n    this.wcsBlur = createEvent(this, \"wcsBlur\", 7);\n    this.switchId = `wcs-switch-${switchIds++}`;\n    this.inheritedAttributes = {};\n    this.name = this.switchId;\n    this.checked = false;\n    this.labelAlignment = 'center';\n    this.disabled = false;\n  }\n  handleChange(ev) {\n    ev.stopImmediatePropagation();\n    ev.preventDefault();\n    this.toggleSwitchState();\n  }\n  async handleHostClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.toggleSwitchState();\n  }\n  handleInputClick(ev) {\n    // If the click event is coming from the mouse we ignore it.\n    // We only want to handle the keyboard interactions as it is the only purpose of this native input\n    if (ev.detail) {\n      ev.stopImmediatePropagation();\n      ev.preventDefault();\n    }\n  }\n  toggleSwitchState() {\n    if (this.disabled) return;\n    this.checked = !this.checked;\n    this.wcsChange.emit({\n      checked: this.checked\n    });\n  }\n  handleFocus(event) {\n    this.wcsFocus.emit(event);\n  }\n  handleBlur(event) {\n    this.wcsBlur.emit(event);\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, SWITCH_INHERITED_ATTRS));\n  }\n  async setAriaAttribute(attr, value) {\n    setOrRemoveAttribute(this.nativeInput, attr, value);\n  }\n  async getLabel() {\n    return getSlottedContentText(this.el);\n  }\n  render() {\n    return h(Host, {\n      key: '7583a10f5f7f2dbad7b31fcab1864d950b7a773c'\n    }, h(\"label\", {\n      key: '93dcf06138949976d600935058f82dc7c0fd44cb',\n      htmlFor: this.name,\n      class: \"wcs-container\",\n      \"aria-disabled\": this.disabled\n    }, h(\"input\", Object.assign({\n      key: '274e8126f833188a2e60f8ed62f1fbc63efa7970',\n      onBlur: this.handleBlur.bind(this),\n      onChange: this.handleChange.bind(this),\n      onClick: this.handleInputClick.bind(this),\n      onFocus: this.handleFocus.bind(this),\n      checked: this.checked,\n      id: this.name,\n      class: \"wcs-switch\",\n      type: \"checkbox\",\n      name: this.name,\n      disabled: this.disabled,\n      ref: el => {\n        this.nativeInput = el;\n      }\n    }, this.inheritedAttributes)), h(\"span\", {\n      key: '57e6bcc1b48d4765ec081736e7bc13000dbaa665',\n      class: \"wcs-checkmark\"\n    }), h(\"span\", {\n      key: 'f03e632e387bb25030ab0cd0f4e5aa451c17d042',\n      class: \"text\"\n    }, h(\"slot\", {\n      key: 'ab9340d1fa032ab2da0318387c5332def8b757dd'\n    }))));\n  }\n  static get delegatesFocus() {\n    return true;\n  }\n  get el() {\n    return getElement(this);\n  }\n};\nlet switchIds = 0;\nSwitch.style = WcsSwitchStyle0;\nexport { Switch as wcs_switch };\n\n"],
  "mappings": "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",
  "names": []
}
